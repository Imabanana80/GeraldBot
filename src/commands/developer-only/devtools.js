const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const baseSlashCommand = require("../../utils/baseSlashCommand");
const { errorMessage, noPerms } = require("../../utils/functions");
const CommandUsage = require("../../schemas/commandUsage");

module.exports = class devtoolsSlashCommand extends baseSlashCommand {
  constructor() {
    super("devtools");
  }
  async run(client, interaction) {
    require("dotenv").config();
    await interaction.deferReply();
    if (interaction.user.id != process.env.OWNERID) {
      await noPerms(interaction, "BOT OWNER");
    } else {
      const cmd = await interaction.options.get("cmd").value;
      var args = await interaction.options.get("args");
      if (args) {
        args = args.value;
      }

      if (cmd == "invite") {
        console.log(`[Dev] Invite link request sent for ${args}`);
        const targetGuild = await client.guilds.fetch(`${args}`);
        const guildChannels = await targetGuild.channels.fetch();
        const channelToSend = guildChannels.filter(
          (channel) => channel.type == "0"
        );

        await targetGuild.invites
          .create(channelToSend.first().id)
          .then((invite) => {
            interaction.editReply("Invite code successfully generated");
            interaction.channel.send(`https://discord.gg/${invite.code}`);
          });
      }

      if (cmd == "allservers") {
        let serverlist = "";
        client.guilds.cache.forEach((guild) => {
          serverlist = serverlist.concat(
            `${guild.name}` +
              ` (${guild.memberCount})` +
              " - " +
              `${guild.id}` +
              "\n"
          );
        });

        var buff = Buffer.from(serverlist, "utf-8");
        interaction.editReply({
          content: `**${client.users.cache.size} users in ${client.guilds.cache.size} servers**`,
          files: [{ attachment: buff, name: "serverlist.txt" }],
        });
      }

      if (cmd == "usage") {
        const getCommandUsage = await CommandUsage.findOne({ command: args });
        if (!getCommandUsage) {
          const embed = new EmbedBuilder()
            .setTitle("Unable to fetch uses")
            .setDescription(
              `\`\`/${args}\`\` has either never been used or does not exist`
            )
            .setColor("Red");
          interaction.editReply({ embeds: [embed] });
        } else {
          const embed = new EmbedBuilder()
            .setTitle(`Usage stats`)
            .setDescription(
              `\`\`/${args}\`\` has been used \`\`${getCommandUsage.uses}\`\` times`
            )
            .setColor(0xfaff86);
          interaction.editReply({ embeds: [embed] });
        }
      }

      if (cmd == "error") {
        errorMessage(client, interaction, "ERROR GENERATED BY BOT OWNER");
      }
    }
  }
  getSlashCommandJSON() {
    return new SlashCommandBuilder()
      .setName(this.name)
      .setDescription("DEVELOPER ONLY COMMAND")
      .addStringOption((option) =>
        option.setName("cmd").setDescription("cmd").setRequired(true)
      )
      .addStringOption((option) =>
        option.setName("args").setDescription("args")
      );
  }
};
